<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>爬虫 on 兔子的咖啡馆</title><link>https://blog.rabbee.cn/categories/%E7%88%AC%E8%99%AB/</link><description>Recent content in 爬虫 on 兔子的咖啡馆</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 09 Feb 2020 13:52:09 +0800</lastBuildDate><atom:link href="https://blog.rabbee.cn/categories/%E7%88%AC%E8%99%AB/index.xml" rel="self" type="application/rss+xml"/><item><title>使用CDP爬取任意网站</title><link>https://blog.rabbee.cn/2020/02/09/crawler-cdp/</link><pubDate>Sun, 09 Feb 2020 13:52:09 +0800</pubDate><guid>https://blog.rabbee.cn/2020/02/09/crawler-cdp/</guid><description>简介 CDP全称Chrome DevTools Protocol，是一种控制开发者工具的协议。可以通过已开放的功能，来间接操纵浏览器完成一系列自动化工作。
我使用的工具 chromedp 是一个使用Golang封装CDP的项目，它的功能庞大，包括一些常用的元素点击、滑动事件等等，如果是做 自动化测试 的话，选用它更加合适。 mafredri/cdp 也是一个使用Golang封装CDP的项目，但是它仅仅是做了封装，并保持整体API风格的统一，减少我们使用过程中的不适。本文将使用这个框架进行开发。 headless-shell 是一个基于debian的无界面chrome浏览器的docker镜像，可以集成到我们常用的微服务架构里。 搭建使用CDP的整体框架 虽然mafredri/cdp提供了最基础的使用方法，但是我们需要在它的基础上修改，以便能满足我们的需求，和持续稳定爬取的要求。
初始化与开发者工具的远程连接 var ( cdpHost = &amp;#34;127.0.0.1&amp;#34; cdpPort = &amp;#34;9222&amp;#34; devt *devtool.DevTools ) func init() { devt = devtool.New(fmt.Sprintf(&amp;#34;http://%s:%d&amp;#34;, cdpHost, cdpPort)) } 通过访问页面来获取所有请求返回的数据 func Run(url string) { ctx, cancel := context.WithTimeout(context.Background(), timeout) //该页面的超时时间，最好增加多一些缓冲时间，不然页面线程可能比获取数据的线程早退出 defer cancel() //打开一个空白页 pt, err := devt.Create(ctx) if err != nil { return } defer devt.Close(ctx, pt) //退出时关闭 conn, err := rpcc.</description></item></channel></rss>